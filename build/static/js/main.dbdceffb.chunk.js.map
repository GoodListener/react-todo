{"version":3,"sources":["components/todo/TodoForm.js","components/todo/Todo.js","components/todo/TodoList.js","components/user/User.js","storage/UserStorage.js","context/UserContext.js","components/user/UserList.js","components/main/MainTemplate.js","components/user/UserForm.js","components/leftMenu/LeftMenuTemplate.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_ref","value","onChange","onCreate","onKeyPress","react_default","a","createElement","className","onClick","Todo","this","props","no","name","checked","handleRemove","Component","TodoList","_this$props","todos","todoList","map","id","todo_Todo","key","User","state","input","handleCreate","_this$state","_this","setState","concat","makeNewID","filter","todo","handleKeyPress","e","handleChange","target","Date","getTime","todo_TodoForm","todo_TodoList","UserStorage","userItem","localStorage","getItem","console","log","user","setItem","React","createContext","Provider","UserConsumer","Consumer","UserProvider","users","JSON","parse","actions","setValue","saveItem","stringify","children","UserList","_this2","userList","user_User","MainTemplate","user_UserList","UserForm","UserFormContainer","UserForm_UserForm","LeftMenuTemplate","user_UserForm","App","UserContext_UserProvider","leftMenu_LeftMenuTemplate","main_MainTemplate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbdceffb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TodoForm = ({value, onChange, onCreate, onKeyPress}) => {\r\n  return (\r\n    <div className=\"userForm\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n      <button onClick={onCreate}>add</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass Todo extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.no}.\r\n        {this.props.name}\r\n        {this.props.checked}\r\n        <button onClick={this.props.handleRemove}>delete</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo'\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n    const {todos, handleRemove} = this.props;\r\n    const todoList = todos.map(\r\n      ({name, checked, id, no}) =>\r\n      <Todo\r\n        key={id}\r\n        name={name}\r\n        checked={checked}\r\n        no={no}\r\n        handleRemove={() => handleRemove(id)}\r\n        />\r\n    )\r\n\r\n    return (\r\n      <div>\r\n        {todoList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\nimport TodoForm from '../todo/TodoForm'\r\nimport TodoList from '../todo/TodoList'\r\n\r\nclass User extends Component {\r\n  no = 1\r\n\r\n  state = {\r\n    input : '',\r\n    todos : []\r\n  }\r\n\r\n  render() {\r\n    const {input} = this.state;\r\n    const {handleChange, handleRemove, handleCreate, handleKeyPress} = this;\r\n\r\n    return (\r\n      <li className=\"user\">\r\n        {this.props.name}\r\n        <button onClick={this.props.handleRemove}>delete</button>\r\n        <TodoForm\r\n          value={input}\r\n          onChange={handleChange}\r\n          onCreate={handleCreate}\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        <TodoList\r\n          todos={this.state.todos}\r\n          handleRemove={handleRemove}\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n\r\n  handleCreate = () => {\r\n    const { input, todos } = this.state;\r\n    this.setState({\r\n      input: '', // 인풋 비우고\r\n      // concat 을 사용하여 배열에 추가\r\n      todos: todos.concat({\r\n        no : this.no++,\r\n        id: this.makeNewID(),\r\n        name: input,\r\n        checked: false\r\n      })\r\n    });\r\n  }\r\n\r\n  handleRemove = (id) => {\r\n    const { todos } = this.state;\r\n    this.setState({\r\n      todos: todos.filter((todo) => todo.id !== id)\r\n    })\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    if(e.key === 'Enter') {\r\n      this.handleCreate();\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      input: e.target.value // input 의 다음 바뀔 값\r\n    });\r\n  }\r\n\r\n  makeNewID = () => {\r\n    return new Date().getTime();\r\n  }\r\n}\r\n\r\nexport default User;\r\n","class UserStorage {\r\n  getItem() {\r\n    const userItem = localStorage.getItem('user');\r\n    console.log(userItem);\r\n    if (userItem) {\r\n      return userItem\r\n    }\r\n    return \"[]\";\r\n  }\r\n\r\n  saveItem(user) {\r\n    localStorage.setItem('user', user);\r\n  }\r\n}\r\n\r\nexport default UserStorage;\r\n","import React, { Component } from 'react';\r\nimport UserStorage from '../storage/UserStorage'\r\n\r\nconst { Provider, Consumer: UserConsumer } = React.createContext();\r\n\r\nclass UserProvider extends Component {\r\n  state = {\r\n    users : JSON.parse(new UserStorage().getItem())\r\n  }\r\n\r\n  actions = {\r\n    setValue: (value) => {\r\n      this.setState({\r\n        users: value\r\n      });\r\n      new UserStorage().saveItem(JSON.stringify(value));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    const { state, actions } = this;\r\n    const value = { state, actions };\r\n    return (\r\n      <Provider value={value}>\r\n        {this.props.children}\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {\r\n  UserProvider,\r\n  UserConsumer,\r\n};\r\n","import React, { Component } from 'react';\r\nimport User from './User'\r\nimport { UserConsumer } from '../../context/UserContext'\r\n\r\nclass UserList extends Component {\r\n  handleRemove = (key, users, actions) => {\r\n    actions.setValue(users.filter((user) => user.key !== key));\r\n  }\r\n\r\n  render() {\r\n    const userList = (\r\n    <UserConsumer>\r\n      {\r\n        ({state, actions}) => (\r\n          state.users.map(\r\n            user => (\r\n              <User\r\n                key={user.key}\r\n                name={user.name}\r\n                handleRemove={() => {this.handleRemove(user.key, state.users, actions)}}\r\n              />)\r\n          )\r\n        )\r\n      }\r\n    </UserConsumer>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {userList}\r\n    </div>\r\n  )\r\n  }\r\n\r\n}\r\n\r\nexport default UserList;\r\n","import React, { Component } from 'react';\r\nimport UserList from '../user/UserList'\r\n\r\nclass MainTemplate extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"layout mainTemplate\">\r\n        <div>\r\n          <UserList></UserList>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainTemplate;\r\n","import React, { Component } from 'react'\r\nimport './user.scss';\r\nimport { UserConsumer } from '../../context/UserContext'\r\n\r\nclass UserForm extends Component {\r\n  state = {\r\n    input : ''\r\n  }\r\n\r\n  ComponentDidMount() {\r\n    this.setState({\r\n      input: this.props.value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"userForm\">\r\n        <input\r\n          value={this.state.input}\r\n          onChange={this.handleChange}\r\n          onKeyPress={this.handleKeyPress}/>\r\n        <button\r\n           onClick={this.handleCreate}\r\n           >add</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleCreate = () => {\r\n    const { input } = this.state;\r\n    const { value } = this.props;\r\n    const users = value.concat({\r\n      key: new Date().getTime(),\r\n      name: input,\r\n      checked: false\r\n    })\r\n\r\n    this.props.setValue(users);\r\n    this.setState({\r\n      input : ''\r\n    })\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    if(e.key === 'Enter') {\r\n      this.handleCreate();\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      input: e.target.value // input 의 다음 바뀔 값\r\n    });\r\n  }\r\n}\r\n\r\n\r\nconst UserFormContainer = () => (\r\n  <UserConsumer>\r\n    {\r\n      ({state, actions}) => (\r\n        <UserForm\r\n          value={state.users}\r\n          setValue={actions.setValue}\r\n        />\r\n      )\r\n    }\r\n  </UserConsumer>\r\n)\r\n\r\nexport default UserFormContainer;\r\n","import React, { Component } from 'react';\r\nimport UserForm from '../user/UserForm'\r\n\r\nclass LeftMenuTemplate extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"layout leftMenu\">\r\n        <div>\r\n          <UserForm/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeftMenuTemplate;\r\n","import React, { Component } from 'react';\r\nimport MainTemplate from './components/main/MainTemplate'\r\nimport LeftMenuTemplate from './components/leftMenu/LeftMenuTemplate'\r\nimport { UserProvider } from './context/UserContext'\r\nimport './App.scss'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <UserProvider>\r\n          <LeftMenuTemplate/>\r\n          <MainTemplate/>\r\n          <div className=\"layout rightMenu\">RIGHT</div>\r\n        </UserProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}